#!/usr/bin/awk -f

# Turn a stream of "t=1600297219 " into a bar graph ||||||| with green/red
# to show availability of service.

function state_color(st) {
	return (st == "err") ? 31 : (st == "ok") ? 32 : 34
}

function flush_values(ctx)
{
	printf "\033[%d;1m|\033[m", state_color(ctx["state"])
	ctx["state"] = "ok"
	ctx["progress"] += STEP
}

function value_init(ctx)
{
	ctx["progress"] = START
	ctx["status"] = "ok"
}

function value_add(time, value, ctx)
{
	#print "time="time, "step="STEP, "start="START, "progress="ctx["progress"], "value="value, "state="ctx["state"]

	if (time > ctx["progress"])
		flush_values(ctx)

	# catch up with time by filling the gaps with spaces
	while (ctx["progress"] < time) {
		printf " "
		ctx["progress"] += STEP
	}

	# order of priority is "err" > "ok"
	ctx["state"] = (value == "err" ? "err" : ctx["state"])
}

function var_split(input, var,
	key, fields, i)
{
	split(input, fields, " ")
	for (i in fields) {
		key = substr(fields[i], 1, index(fields[i], "=") - 1)
		var[key] = substr(fields[i], index(fields[i], "=") + 1)
	}
}

BEGIN {
	cmd = "date +%s"
	cmd | getline NOW
	close(cmd)

	STEP = ENVIRON["STEP"] ? ENVIRON["STEP"] : 600
	COUNT = ENVIRON["COUNT"] ? ENVIRON["COUNT"] : 80
	NOW = NOW - NOW % STEP + STEP
	START = NOW - STEP * COUNT
	START = START - START % STEP + STEP

	value_init(ctx)

	printf "  %s >", START
}

{ var_split($0, var) }

var["time"] >= START {
	value_add(var["time"], var["state"], ctx)
}

{ split("", var) }

END {
	value_add(NOW, -1, ctx)
	printf "< %s\n", NOW
}
